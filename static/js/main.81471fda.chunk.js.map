{"version":3,"sources":["components/TwoBedroomLineChart.jsx","components/CaliforniaLineChart.jsx","components/Charts.jsx","App.js","serviceWorker.js","index.js","apartment_rent.csv"],"names":["colors","states","California","Texas","Washington","Illinois","Colorado","Maryland","TwoBedroomLineChart","props","data","months","isEmpty","labelSet","Set","dataset","propertIndex","s","dataRow","label","backgroundColor","borderColor","fill","d","key","includes","parse","split","month","parseInt","year","add","value","push","chartData","type","labels","Array","from","datasets","options","title","fontSize","display","text","ctx","document","getElementById","getContext","Chart","id","CaliforniaLineChart","i","bedroom_size","Bedroom_Size","Charts","useState","setData","onComplete","result","useEffect","Papa","ApartmentData","download","header","delimiter","newline","complete","class","style","margin","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.81471fda.chunk.js","sourcesContent":["import React from \"react\";\nimport { isEmpty } from \"lodash\";\nimport { Chart } from \"chart.js\";\n\nconst colors = [\n  \"#ffa372\",\n  \"#ed6663\",\n  \"#81b214\",\n  \"#4e89ae\",\n  \"#ffc93c\",\n  \"#bfdcae\",\n  \"#a2d5f2\",\n];\n\nconst states = {\n  California: 22,\n  \"New York\": 162,\n  Texas: 217,\n  Washington: 237,\n  Illinois: 67,\n  Colorado: 27,\n  Maryland: 102,\n};\n\nconst TwoBedroomLineChart = (props) => {\n  const { data, months } = props;\n\n  if (!isEmpty(data)) {\n    let labelSet = new Set();\n    let dataset = [];\n    let propertIndex = 0;\n    for (const s in states) {\n      let index = states[s];\n      let dataRow = {\n        label: s,\n        backgroundColor: colors[propertIndex % 8],\n        borderColor: colors[propertIndex % 8],\n        fill: false,\n        data: [],\n      };\n      propertIndex++;\n      let d = data[index];\n      for (const key in d) {\n        if (key.includes(\"P\")) {\n          let parse = key.split(\"_\");\n          let month = months[parseInt(parse[2]) - 1];\n          let year = parse[1];\n          let label = `${month}, ${year}`;\n          labelSet.add(label);\n\n          let value = parseInt(d[key]);\n          dataRow.data.push(value);\n        }\n      }\n      dataset.push(dataRow);\n    }\n\n    const chartData = {\n      type: \"line\",\n      data: {\n        labels: Array.from(labelSet),\n        datasets: dataset,\n      },\n      options: {\n        title: {\n          fontSize: 36,\n          display: true,\n          text: \"2BR in Various States\",\n        },\n      },\n    };\n\n    const ctx = document.getElementById(\"TwoBedroomLineChart\").getContext(\"2d\");\n    const myLineChart = new Chart(ctx, chartData);\n  }\n\n  return (\n    <div>\n      <canvas id=\"TwoBedroomLineChart\"></canvas>\n    </div>\n  );\n};\n\nexport default TwoBedroomLineChart;\n","import React from \"react\";\nimport { isEmpty } from \"lodash\";\nimport { Chart } from \"chart.js\";\n\nconst colors = [\"#e84a5f\", \"#ff847c\", \"#feceab\", \"#99b898\", \"#66bfbf\"];\n\nconst CaliforniaLineChart = (props) => {\n  const { data, months } = props;\n\n  if (!isEmpty(data)) {\n    let labelSet = new Set();\n    let dataset = [];\n    for (let i = 20; i < 25; i++) {\n      let dataRow = {\n        label: \"\",\n        backgroundColor: colors[i % 20],\n        borderColor: colors[i % 20],\n        fill: false,\n        data: [],\n      };\n      let d = data[i];\n      let bedroom_size = d.Bedroom_Size;\n      dataRow.label = bedroom_size;\n      for (const key in d) {\n        if (key.includes(\"P\")) {\n          let parse = key.split(\"_\");\n          let month = months[parseInt(parse[2]) - 1];\n          let year = parse[1];\n          let label = `${month}, ${year}`;\n          labelSet.add(label);\n\n          let value = parseInt(d[key]);\n          dataRow.data.push(value);\n        }\n      }\n      dataset.push(dataRow);\n    }\n\n    const chartData = {\n      type: \"line\",\n      data: {\n        labels: Array.from(labelSet),\n        datasets: dataset,\n      },\n      options: {\n        title: {\n          fontSize: 36,\n          display: true,\n          text: \"Rent in California\",\n        },\n      },\n    };\n\n    const ctx = document.getElementById(\"CaliforniaLineChart\").getContext(\"2d\");\n    const myLineChart = new Chart(ctx, chartData);\n  }\n\n  return (\n    <div>\n      <canvas id=\"CaliforniaLineChart\"></canvas>\n    </div>\n  );\n};\n\nexport default CaliforniaLineChart;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Papa from \"papaparse\";\nimport ApartmentData from \"../apartment_rent.csv\";\n\nimport TwoBedroomLineChart from \"./TwoBedroomLineChart\";\nimport CaliforniaLineChart from \"./CaliforniaLineChart\";\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst Charts = (props) => {\n  const [data, setData] = useState({});\n\n  const onComplete = (result) => {\n    setData(result.data);\n  };\n\n  // https://github.com/Keyang/node-csvtojson/issues/285\n  useEffect(() => {\n    Papa.parse(ApartmentData, {\n      download: true,\n      header: true,\n      delimiter: \",\",\n      newline: \",\",\n      complete: onComplete,\n    });\n  }, []);\n\n  return (\n    <div class=\"container\" style={{ margin: \"40px auto\" }}>\n      <CaliforniaLineChart data={data} months={months} />\n      <TwoBedroomLineChart data={data} months={months} />\n    </div>\n  );\n};\n\nexport default Charts;\n","import React from 'react';\nimport Charts from './components/Charts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Charts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/apartment_rent.e2e30bc3.csv\";"],"sourceRoot":""}